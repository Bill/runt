= Sugar Tutorial

<em> This tutorial assumes you are familiar with use of the Runt API to
create temporal expressions. If you're unfamiliar with how and why to write
temporal expressions, take a look at the temporal expression 
tutorial[http://runt.rubyforge.org/doc/files/doc/tutorial_te_rdoc.html].</em>

Starting with version 0.7.0, Runt provides some syntactic sugar for creating 
temporal expressions. Runt also provides a builder class for which can be
used to create expressions in a more readable way than simply using :new.

First, let's look at some of the new shorcuts for creating individual
expressions. If you look at the lib/runt/sugar.rb file you find that the
Runt module has been re-opened and some nutty stuff happens when 
:method_missing is called.

For example, if you've included the Runt module, you can now create a
DIWeek expression by calling a method whose name matches the following
pattern:

    /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)$/

So

  tuesday

is equivalent to

  DIWeek.new(Tuesday)

Here's a quick summary of patterns and the expressions they create.

=== REDay

<b>regex</b>::           /^(daily_)(\d{1,2})_(\d{2})([ap]m)_to_(\d{1,2})_(\d{2})([ap]m)$/

<b>example</b>::         daily_8_30am_to_10_00pm  

<b>action</b>::          REDay.new(8,30,22,00)

=== REWeek

<b>regex</b>::           /^weekly_(sunday|monday|tuesday|wednesday|thursday|friday|saturday)\_to\_(sunday|monday|tuesday|wednesday|thursday|friday|saturday)$/

<b>example</b>::         weekly_wednesday_to_friday  

<b>action</b>::          REWeek.new(Wednesday, Friday)

=== REMonth

<b>regex</b>::          /^monthly_(\d{1,2})(?:st|nd|rd|th)\_to\_(\d{1,2})(?:st|nd|rd|th)$/

<b>example</b>::        monthly_2nd_to_24th 

<b>action</b>::         REMonth.new(2,24) 

